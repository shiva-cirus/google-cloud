/*
 * Copyright Â© 2019 Cask Data, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package io.cdap.plugin.gcp.firestore.sink;

import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.CollectionReference;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.Firestore;
import com.google.cloud.firestore.WriteResult;
import io.cdap.plugin.gcp.firestore.util.FirestoreUtil;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.mapreduce.RecordWriter;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.util.Map;

import static io.cdap.plugin.gcp.common.GCPConfig.NAME_PROJECT;
import static io.cdap.plugin.gcp.common.GCPConfig.NAME_SERVICE_ACCOUNT_FILE_PATH;
import static io.cdap.plugin.gcp.firestore.util.FirestoreConstants.PROPERTY_COLLECTION;
import static io.cdap.plugin.gcp.firestore.util.FirestoreConstants.PROPERTY_DATABASE_ID;

/**
 * {@link FirestoreRecordWriter} writes the job outputs to the Firestore.
 */
public class FirestoreRecordWriter extends RecordWriter<NullWritable, Map<String, Object>> {
  private static final Logger LOG = LoggerFactory.getLogger(FirestoreRecordWriter.class);

  private final Firestore db;
  private int totalCount;
  private int numberOfRecordsInBatch;
  private CollectionReference collectionRef;

  public FirestoreRecordWriter(TaskAttemptContext taskAttemptContext) {
    Configuration config = taskAttemptContext.getConfiguration();
    String projectId = config.get(NAME_PROJECT);
    String serviceAccountFilePath = config.get(NAME_SERVICE_ACCOUNT_FILE_PATH);
    String databaseId = config.get(PROPERTY_DATABASE_ID);
    String collection = config.get(PROPERTY_COLLECTION);
    //this.batchSize = config.getInt(DatastoreSinkConstants.CONFIG_BATCH_SIZE, 25);
    //this.useAutogeneratedKey = config.getBoolean(DatastoreSinkConstants.CONFIG_USE_AUTOGENERATED_KEY, false);
    //LOG.debug("Initialize RecordWriter(projectId={}, batchSize={}, useAutogeneratedKey={}, "
    //  + "serviceFilePath={})", projectId, batchSize, useAutogeneratedKey, serviceAccountFilePath);
    LOG.debug("Initialize RecordWriter(projectId={}, database={}, collection={}, "
      + "serviceFilePath={})", projectId, databaseId, collection, serviceAccountFilePath);

    this.db = FirestoreUtil.getFirestore(serviceAccountFilePath, projectId, databaseId);
    //this.batch = datastore.newBatch();
    this.totalCount = 0;
    this.numberOfRecordsInBatch = 0;
    this.collectionRef = db.collection(collection);
  }

  @Override
  public void write(NullWritable key, Map<String, Object> entity) throws IOException, InterruptedException {
    LOG.trace("RecordWriter write({})", entity);

    try {
      DocumentReference docRef = collectionRef.document();
      ApiFuture<WriteResult> result = docRef.set(entity);
      result.get();
      ++totalCount;
      ++numberOfRecordsInBatch;
    } catch (Exception e) {
      LOG.error("Error: ", e);
      throw new InterruptedException(e.getMessage());
    }

    /*
    if (useAutogeneratedKey) {
      batch.putWithDeferredIdAllocation(entity);
    } else {
      batch.put(entity);
    }
    ++totalCount;
    ++numberOfRecordsInBatch;
    if (totalCount % batchSize == 0) {
      flush();
    }
    */
  }

  @Override
  public void close(TaskAttemptContext taskAttemptContext) throws IOException, InterruptedException {
    flush();
    try {
      db.close();
    } catch (Exception e) {
      throw new IOException(e.getMessage(), e);
    }
    LOG.debug("Total number of values written to Cloud Firestore: {}", totalCount);
  }

  private void flush() {
    /*
    if (numberOfRecordsInBatch > 0) {
      LOG.debug("Writing a batch of {} values to Cloud Datastore.", numberOfRecordsInBatch);
      Response submit = batch.submit();
      LOG.trace("Generated keys: {}", submit.getGeneratedKeys());
      batch = datastore.newBatch();
      numberOfRecordsInBatch = 0;
    }
    */
  }
}
